# syntax=docker/dockerfile:1.4
#
# Usage:
#    docker buildx build -t ue4-source  --build-context ue4git="Z:/repos/UE_4.27/.git"  .
#
# Largely based on output from ue4-docker:
#  ue4-docker build --linux  --target source --ue-version 4.27.2 --exclude ddc --exclude debug --exclude templates --opt source-mode=copy -layout /project/ue4-source --combine
#
# This file was generated by ue4-docker version 0.0.99 with the following options:
# 
# - combine: true
# - excluded_components: {"ddc": true, "debug": true, "templates": true}
# - source_mode: "copy"
# 
# This Dockerfile combines the steps for the following images:
# 
# - ue4-build-prerequisites
# - ue4-source

ARG BASEIMAGE=ubuntu:18.04
FROM "${BASEIMAGE}" as step-0

# Disable interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt apt update && apt install -y --no-install-recommends git-core

FROM step-0 as gitsource
RUN mkdir /ue4

ARG UE_GIT_TAG
RUN [ -n "${UE_GIT_TAG}" ] || { echo "You need to provide UE4 git tag to use. For example: --build-arg UE_GIT_TAG=4.27.2-release"; exit 1; }
RUN --mount=type=bind,target=/ue4.git,from=ue4git git --git-dir=/ue4.git archive ${UE_GIT_TAG} | tar -C /ue4 -xf -

FROM step-0 as prerequisites

# Install our build prerequisites
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt apt update && apt install -y --no-install-recommends \
		build-essential \
		ca-certificates \
		curl \
		git-lfs \
		python3 \
		python3-dev \
		python3-pip \
		shared-mime-info \
		software-properties-common \
		sudo \
		tzdata \
		unzip \
		xdg-user-dirs \
		zip && \
	echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo '' \

# Add a sentinel label so we can easily identify all derived images, including intermediate images
LABEL com.adamrehn.ue4-docker.sentinel="1"

# Add the "display" driver capability for NVIDIA GPUs
# (This also allows us to run the Editor from an interactive container by bind-mounting the host system's X11 socket)
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES},display


# Disable the default "lecture" message the first time a user runs a command using sudo
RUN echo 'Defaults lecture="never"' >> /etc/sudoers && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

# Unreal refuses to run as the root user, so create a non-root user with no password and allow them to run commands using sudo
RUN useradd --create-home --home /home/ue4 --shell /bin/bash --uid 1000 ue4 && \
	passwd -d ue4 && \
	usermod -a -G audio,video,sudo ue4 && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''
USER ue4

# Enable Git Large File Storage (LFS) support
RUN git lfs install && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

FROM prerequisites as source

# Enable verbose output for steps that patch files?
ARG VERBOSE_OUTPUT=0

# Copy the Unreal Engine source code from the ue4git context.
# Use "docker buildx build --build-context ue4git=/path/on/your/host/UnrealEngine ." git dir
COPY --link --from=gitsource --chown=ue4:ue4 /ue4 /home/ue4/UnrealEngine

# Apply our bugfix patches to broken Engine releases such as 4.25.4
# (Make sure we do this before the post-clone setup steps are run)
COPY --chown=ue4:ue4 patch-broken-releases.py /tmp/patch-broken-releases.py
RUN python3 /tmp/patch-broken-releases.py /home/ue4/UnrealEngine $VERBOSE_OUTPUT && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

# Run post-clone setup steps, ensuring our package lists are up to date since Setup.sh doesn't call `apt-get update`

# When running without BuildKit, we use the `-no-cache` flag to disable caching of dependency data in `.git/ue4-gitdeps`, saving disk space
WORKDIR /home/ue4/UnrealEngine

RUN --mount=type=cache,target=/cache/gitdeps,uid=1000 ./Engine/Build/BatchFiles/Linux/GitDependencies.sh --cache=/cache/gitdeps \
    --exclude=Engine/Binaries/ThirdParty/CEF3 \
    --exclude=Engine/Binaries/ThirdParty/ICU \
    --exclude=Engine/Binaries/ThirdParty/Mono/Mac \
    --exclude=Engine/Binaries/ThirdParty/PhysX3 \
    --exclude=Engine/Binaries/ThirdParty/Python \
    --exclude=Engine/Binaries/ThirdParty/Python3 \
    --exclude=Engine/Binaries/ThirdParty/svn \
    --exclude=Engine/Binaries/ThirdParty/AppLocalDependencies/Win32 \
    --exclude=Engine/Binaries/ThirdParty/AppLocalDependencies/Win64 \
    --exclude=Templates \
    --exclude=Samples \
    --exclude=FeaturePacks \
    --exclude=Engine/Content \
    --exclude=Engine/Extras \
    --exclude=Engine/Documentation \
    --exclude=Engine/Plugins \
    --exclude=Engine/Source/Programs/Enterprise/ \
    --exclude=Engine/Source/ThirdParty/ShaderConductor/ \
    --exclude=Engine/Source/ThirdParty/PhysX3/ \
    --exclude=Engine/Source/ThirdParty/ICU/ \
    --exclude=Engine/Source/ThirdParty/CEF3/ \
    --exclude=Engine/Source/ThirdParty/Windows/ \
    --exclude=Engine/Source/ThirdParty/Android/ \
    --exclude=Engine/Source/ThirdParty/FBX/ \
    --exclude=Engine/Source/ThirdParty/mtlpp/ \
    --exclude=Engine/Source/ThirdParty/Intel/ \
    --exclude=Engine/Source/ThirdParty/WebRTC/ \
    --exclude=Engine/Source/ThirdParty/EOSSDK/ \
    --exclude=Engine/Source/ThirdParty/Vivox/ \
    --exclude=Engine/Source/ThirdParty/GoogleVR/ \
    --exclude=Engine/Source/ThirdParty/glslang/ \
    --exclude=Engine/Source/ThirdParty/FreeType2/ 


RUN --mount=type=cache,target=.git/ue4-sdks,uid=1000 cd Engine/Build/BatchFiles/Linux && ./Setup.sh


#RUN sudo apt-get update && \
#	./Setup.sh -no-cache && \
#	sudo rm -rf /var/lib/apt/lists/* && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

# The linker bundled with UE4.20.0 onwards chokes on system libraries built with newer compilers,
# so redirect the bundled clang to use the system linker instead
COPY --chown=ue4:ue4 linker-fixup.py /tmp/linker-fixup.py
RUN python3 /tmp/linker-fixup.py /home/ue4/UnrealEngine/Engine/Extras/ThirdPartyNotUE/SDKs/HostLinux/Linux_x64 `which ld` && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

# Remove the sample `XXX` example platform code, since this breaks builds from 4.24.0 onwards
# (For details of what this is, see: <https://forums.unrealengine.com/unreal-engine/announcements-and-releases/1617783-attention-platform-changes-ahead>)
RUN rm -r -f /home/ue4/UnrealEngine/Engine/Platforms/XXX && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''

# Apply our bugfix patches to UnrealBuildTool (UBT)
COPY --chown=ue4:ue4 patch-ubt.py /tmp/patch-ubt.py
RUN python3 /tmp/patch-ubt.py /home/ue4/UnrealEngine/Engine/Source/Programs/UnrealBuildTool && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''


# Perform first-run setup for Mono, UnrealBuildTool and AutomationTool, which makes it possible to build Unreal projects and plugins as users other than `ue4`
# (Note that this will only work with 4.26.0 and newer, older Engine versions will always require write access to `/home/ue4/UnrealEngine`)
# See the comments on this issue for details, including the need to ensure $HOME is set correctly: <https://github.com/adamrehn/ue4-docker/issues/141>
RUN ./Engine/Build/BatchFiles/Linux/Build.sh UnrealHeaderTool Linux Development -SkipBuild && \
        mkdir -p ./Engine/Programs/AutomationTool/Saved && \
        chmod a+rw ./Engine/Programs/AutomationTool/Saved && echo '' && echo 'RUN directive complete. Docker will now commit the filesystem layer to disk.' && echo 'Note that for large filesystem layers this can take quite some time.' && echo 'Performing filesystem layer commit...' && echo ''
